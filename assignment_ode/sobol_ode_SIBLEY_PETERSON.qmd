---
title: "Modeling Forest Growth Sensitivity Analysis using ODE Solver and Sobol "
author: "Jordan Sibley and Elizabeth Peterson"
date: "2025-05-10"
execute: 
  eval: true
  message: false
  warning: false
format:
  html:
    toc: true
embed-resources: true
---

## Set up and overview 

Consider the following model of forest growth (where forest size in measured in units of carbon (C))
- dC/dt = r * C for forests where C is below a threshold canopy closure
- dC/dt = g* 1( - C/K) for forests where carbon is at or above the threshold canopy closure
- K is a carrying capacity in units of carbon
The size of the forest (C), Canopy closure threshold and carrying capacity are all in units of carbon You could think of the canopy closure threshold as the size of the forest at which growth rates change from exponential to linear You can think of r, as early exponential growth rate and gas the linear growth rate once canopy closure has been reached


1. Implement this model in R (as a differential equation)
```{r}
library(tidyverse)
library(deSolve)
library(sensitivity)
library(here)
source(here("assignment_ode/forest_growth.R"))
```


2. Run the model for 300 years (using the ODE solver) starting with an initial forest size of 10 kg/C, and using the following parameters:
  - canopy closure threshold of 50 kgC
  - K = 250 kg C (carrying capacity)
  - r = 0.01 (exponential growth rate before before canopy closure)
  - g = 2kg/year (linear growth rate after canopy closure)
  

```{r}
# Initial forest size (kg/C)
C0 <- c(C=10)
# Gets results for 300 years (evaluating every year)
simtimes <- seq(from = 1, to = 300)
# List of parameters
parms <- list(thresh = 50, K = 250, r = 0.01, g = 2)
# Run the model
result <- ode(y = C0, times = simtimes, func = forest_growth, parms = parms)
```


3. Graph the results. Here you are graphing the trajectory with the parameters as given (eg no uncertainty)
```{r}
# Create line graph of forest growth over time according to model
ggplot(result, aes(time, C)) +
  geom_line() +
  geom_hline(yintercept = 50, linetype = "dashed", color = "firebrick") + # canopy threshold
  labs(x = "Year",
       y = "Size of the forest (kg of carbon)",
       title = "Forest growth rate over time",
       subtitle = "Based on following model inputs:\n threshold = 50 kg C, K = 250 kg C, r = 0.01, g = 2 kg/year") +
  annotate("text", x = 100, y = 50, label = "Canopy closure threshold", vjust = -1, color = "firebrick") +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold")
  )
```


4. Run a sobol global (vary all parameters at the same time) sensitivity analysis that explores how the estimated maximum forest size (e.g maximum of C 300 years, varies with these parameters
- pre canopy closure growth rate (r)
- post-canopy closure growth rate (g)
- canopy closure threshold and carrying capacity (K)
Assume that parameters are all normally distributed with means as given above and standard deviation of 10% of mean value
```{r}
# Set initial value
C0 <- 10

# Create parameter distribution --> standard deviation is 10% of mean value
np <- 1000
thresh <- rnorm(mean = 50, sd = 5, n = np)
K <- rnorm(mean = 250, sd = 25, n = np)
r <- rnorm(mean = 0.01, sd = 0.001, n = np)
g <- rnorm(mean = 2, sd = 0.2, n = np)
X1 <- cbind.data.frame(r = r, K = K, g = g, thresh = thresh)

# Create second parameter distribution --> standard deviation is 10% of mean value
np <- 1000
thresh <- rnorm(mean = 50, sd = 5, n = np)
K <- rnorm(mean = 250, sd = 25, n = np)
r <- rnorm(mean = 0.01, sd = 0.001, n = np)
g <- rnorm(mean = 2, sd = 0.2, n = np)
X2 <- cbind.data.frame(r = r, K = K, g = g, thresh = thresh)

# fix any negative values and they are not meaningful
X1 <- X1 %>% map_df(pmax, 0.0)
X2 <- X2 %>% map_df(pmax, 0.0)

# Create sobol object
sens_C <- sobolSalt(model = NULL, X1, X2, nboot = 300)

# Add in column names
colnames(sens_C$X) <- c("r", "g", "K","thresh")
```

```{r}
# Set simulation time
simtimes <- seq(0, 300, by = 1)

# Initial condition
C0 <- 10

# Write function to get the max c (metric function)
get_max_C <- function(result) {
    max_C <- max(result$C)
    return(list(max_C))
}

# Create a wrapper function to extract max C for our parameters, using the max c function
wrapper_function <- function(thresh, K, r, g, C0, times, growth_func, max_C_func) {
  # Create a list of the parameters to input into the forest_growth function
  parms <- list(r = r, K = K, g = g, thresh = thresh)
  # Use ODE solver and extract results, naming the columns
  result <- ode(y = C0, times = times, func = forest_growth, parms = parms)
  colnames(result) <- c("time", "C")
  # Compute metrics using our get_max_C function
  metrics <- max_C_func(as.data.frame(result))
  return(metrics)
}
```

```{r, include = FALSE, message = FALSE, warning = FALSE}
# Make list of parameters from the sobol results
parms <- list(r = sens_C$X[, "r"], g = sens_C$X[, "g"], K = sens_C$X[, "K"], thresh = sens_C$X[, "thresh"])

# Use ODE on our parameters to get results
allresults <- parms %>% pmap(wrapper_function, C0 = c(C = 10), times = seq(from = 1, to = 300), growth_func = forest_growth, max_C_func = get_max_C)

# Extract the results into a data frame
allres <- allresults %>%
  map_dfr(~tibble(get_max_C = .x[[1]]))
```


5. Graph the results of the sensitivity analysis as a box plot of maximum forest size and record the two Sobol indices (S and T).
```{r}
# Extract max forest size values
max_forest_size <- sens_C$y

# Get the results in a format that we can plot
tmp <- allres %>%
  pivot_longer(col=everything(), names_to = "max_forest", values_to = "value")

# Make box plot
ggplot(tmp) +
  geom_boxplot(aes(x = max_forest, y = value)) +
  theme_minimal() +
    labs(y = "Max forest size",
       title = "Max forest size with sensitivity") +
  theme(
    plot.title = element_text(face = "bold"),
    axis.title.x = element_blank()
  )
```

```{r}
# Record the two Sobol indices (S and T)
sens_C_max <- sensitivity::tell(sens_C, allres$get_max_C)

# S index: first-order indices (main effect without co-variance)
rownames(sens_C_max$S) <- c("r", "g", "K","thresh")
print(sens_C_max$S)

# T index: total sensitivity index
rownames(sens_C_max$T) <- c("r", "g", "K","thresh")
print(sens_C_max$T)
```

6. In 2-3 sentences, discuss what the results of your simulation might mean. (For example think about how what parameters climate change might influence):


The sensitivity analysis shows that the model's prediction of maximum forest size is most influenced by the exponential growth rate (r), then by the post-canopy linear growth rate (g). The carrying capacity (K) has a moderate effect, while the canopy closure threshold has minimal impact. This is consistent across both the first-order Sobol indices (S), which measure individual parameter effects, and the total-order indices (T), which also account for interactions. The increase in sensitivity from S to T suggests that parameter interactions, particularly involving r and g, play a meaningful role in determining forest carbon dynamics.
Heightened temperatures from climate change significantly influence both early and late-stage forest growth rates, making r and g key ways through which climate change could affect long-term carbon storage in forests.






